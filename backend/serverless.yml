service:
  name: sls-movie-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}
  rolePermissionsBoundary: arn:aws:iam::001521917770:policy/acs/acs-boundary-policy
  
  environment:
    MOVIE_TABLE: Movies-${self:provider.stage}
    MOVIE_TABLE_IDX: searchByUserId
    MOVIE_S3_BUCKET: serverless-udagram-movie-datacamp265-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    JWKS_URL: 'https://dev-isohi138.eu.auth0.com/.well-known/jwks.json'
    
  tracing:
    lambda: true
    apiGateway: true
    
custom:
  topicName: moviesTopic-${self:provider.stage}
  documentation:
    api:
      info:
        version: v1.0.0
        title: Todo API
        description: Serverless application for todos sharing
      
functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetMovies:
    handler: src/lambda/http/getMovies.handler
    events:
      - http:
          method: get
          path: movies
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MOVIE_TABLE}/index/${self:provider.environment.MOVIE_TABLE_IDX}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MOVIE_TABLE}

  # TODO: Configure this function
  CreateMovie:
    handler: src/lambda/http/createMovie.handler
    events:
      - http:
          method: post
          path: movies
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/create-movie-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MOVIE_TABLE}  

  # TODO: Configure this function
  UpdateMovie:
    handler: src/lambda/http/updateMovie.handler
    events:
      - http:
          method: patch
          path: movies/{movieId}
          cors: true
          authorizer: Auth
          request:
            schema:
              application/son: ${file(models/update-movie-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MOVIE_TABLE}  

  # TODO: Configure this function
  DeleteMovie:
    handler: src/lambda/http/deleteMovie.handler
    events:
      - http:
          method: delete
          path: movies/{movieId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MOVIE_TABLE}  

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: movies/{movieId}/attachment
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MOVIE_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.MOVIE_S3_BUCKET}/*

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
          
    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: movieId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: movieId
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.MOVIE_TABLE_IDX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: movieId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL 
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.MOVIE_TABLE}
        
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.MOVIE_S3_BUCKET}
        Tags:
          - Key: "Allowed_Public_Access"
            Value: "True"
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
          
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy_265
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.MOVIE_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket        